(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{205:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react-官网学习记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-官网学习记录"}},[t._v("#")]),t._v(" React 官网学习记录")]),t._v(" "),s("h2",{attrs:{id:"特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),s("ul",[s("li",[t._v("React元素是不可变对象。一旦被创建就无法更高它的子元素或者属性。")])]),t._v(" "),s("h2",{attrs:{id:"组件-props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件-props"}},[t._v("#")]),t._v(" 组件&Props")]),t._v(" "),s("blockquote",[s("p",[t._v("组件，类似于Javacript函数。它接受任意的入参，并返回用于描述页面展示内容的React元素。")])]),t._v(" "),s("h3",{attrs:{id:"函数组件与class组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组件与class组件"}},[t._v("#")]),t._v(" 函数组件与class组件")]),t._v(" "),s("h3",{attrs:{id:"渲染组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染组件"}},[t._v("#")]),t._v(" 渲染组件")]),t._v(" "),s("blockquote",[s("p",[t._v("当React元素为用户自定义组件时，它会将JSX所接收的属性转换为单个对象传递给组件，这个对象被称之为“props”。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Welcome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Welcome name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sara"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('  1.我们调用ReactDOM.render()函数，并传入<Welcome name="Sara"/>作为参数;\n  2.React调用Welcome组件，并将{name:"Sara"}作为props传入;\n  3.Welcome组件将<h1>Hello,Sara</h1>元素作为返回值;\n  ReactDOM将DOM高效地更新为<h1>Hello,Sara</h1>。\n')])])]),s("h3",{attrs:{id:"props的只读性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props的只读性"}},[t._v("#")]),t._v(" Props的只读性")]),t._v(" "),s("blockquote",[s("p",[t._v("组件无论是使用函数声明还是通过class声明，都绝不能修改自身的props。\n纯函数：不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。")])]),t._v(" "),s("p",[s("strong",[t._v("所有React组件都必须像纯函数一样保护它们props不被更改")])]),t._v(" "),s("h2",{attrs:{id:"state-生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-生命周期"}},[t._v("#")]),t._v(" State & 生命周期")]),t._v(" "),s("blockquote",[s("p",[t._v("state是私有的，并且完全受控于当前组件")])]),t._v(" "),s("h3",{attrs:{id:"正确使用state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正确使用state"}},[t._v("#")]),t._v(" 正确使用State")]),t._v(" "),s("h4",{attrs:{id:"不要直接修改state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不要直接修改state"}},[t._v("#")]),t._v(" 不要直接修改State")]),t._v(" "),s("blockquote",[s("p",[t._v("构造函数是唯一可以给this.state赋值的地方")])]),t._v(" "),s("h3",{attrs:{id:"state的更新可能是异步的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state的更新可能是异步的"}},[t._v("#")]),t._v(" State的更新可能是异步的")]),t._v(" "),s("blockquote",[s("p",[t._v("出于性能考虑，React可能会把多个setState()调用合并成一个调用。因为this.props和this.state可能会异步更新，所以不要依赖他们的值来更新下一个状态")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("下面的代码可能会无法更新计数器\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("increment\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("要解决这个问题，可以让setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("接收一个函数而不是一个对象。这个函数用上一个state作为第一个参数，将此次更新被应用时的props作为第二个参数\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" tate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("increment  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    或者\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" tate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("increment  \n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"state的更新会被合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state的更新会被合并"}},[t._v("#")]),t._v(" State的更新会被合并")]),t._v(" "),s("blockquote",[s("p",[t._v("当你调用setState()的时候，React会把你提供的对象合并到当前的state")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    当state包含几个独立的变量：\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            posts"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            comments"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("然后可以分别表用setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("来单独地更新它们：\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchPosts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                posts"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchComments")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                comments"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    这里的合并是浅合并，所以"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("comments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("完整保留了"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("但是完全替换了"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments\n")])])]),s("h3",{attrs:{id:"数据是向下流动的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据是向下流动的"}},[t._v("#")]),t._v(" 数据是向下流动的")]),t._v(" "),s("p",[s("code",[t._v("不管是父组件或者是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关系它是函数组件还是class组件。这就是为什么称state为局部的或是封装的原因。除了拥有并设置了它的组件，其他组件都无法访问。")])]),t._v(" "),s("h2",{attrs:{id:"事件处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[t._v("#")]),t._v(" 事件处理")]),t._v(" "),s("ul",[s("li",[t._v("React事件的命名采用小驼峰式，而不是纯小写")]),t._v(" "),s("li",[t._v("使用JSX语法时需要传入一个函数作为事件处理函数，而不是一个字符串")])]),t._v(" "),s("h3",{attrs:{id:"向时间处理程序传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向时间处理程序传递参数"}},[t._v("#")]),t._v(" 向时间处理程序传递参数")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Delete Row"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Delete Row"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n在这两种情况下，React的事件对象e会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过bind的方式，事件对象以及更多的参数将会被隐式的进行传递\n")])])]),s("h2",{attrs:{id:"状态提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态提升"}},[t._v("#")]),t._v(" 状态提升")]),t._v(" "),s("blockquote",[s("p",[t._v("通常，多个组件需要反映相同的变化数据，这时建议将共享状态提升到最近的共同的父组件中去。")])]),t._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" context")]),t._v(" "),s("blockquote",[s("p",[t._v("context提供了一个无需为每层组件手动添加props,就能在组件树间进行数据传递的方法")])]),t._v(" "),s("h3",{attrs:{id:"何时使用context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时使用context"}},[t._v("#")]),t._v(" 何时使用context")]),t._v(" "),s("blockquote",[s("p",[t._v("context设计的目的是为了共享那些对于一个组件树而言是“全局”的数据。")])]),t._v(" "),s("h2",{attrs:{id:"refs转发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#refs转发"}},[t._v("#")]),t._v(" Refs转发")]),t._v(" "),s("blockquote",[s("p",[t._v("Ref转发是一项将ref自动地通过组件传递到其一子组件的技巧。Ref转发是一个可选特性，其允许某些组件接收ref，并将其向下传递给子组件")])]),t._v(" "),s("h2",{attrs:{id:"高阶组件-hoc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件-hoc"}},[t._v("#")]),t._v(" 高阶组件 HOC")]),t._v(" "),s("blockquote",[s("p",[t._v("高阶组件是React中用于复用组件了逻辑的一种高级技巧。HOC自身不是React API的一部分，它是一种基于React的组合特性而形成的设计模式。\n具体而言，高阶组件是参数为组件，返回值为新组件的函数\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n组件是将props转换为UI，而高阶组件是将组件转换为另一个组件")])]),t._v(" "),s("h2",{attrs:{id:"深入jsx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入jsx"}},[t._v("#")]),t._v(" 深入JSX")]),t._v(" "),s("p",[t._v("**实际上，JSX仅仅只是React.createElement(component,props,...children)函数的语法糖")]),t._v(" "),s("h2",{attrs:{id:"portals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#portals"}},[t._v("#")]),t._v(" Portals")]),t._v(" "),s("p",[s("strong",[t._v("Portal提供了一种将子节点渲染到存在于父组件以外的DOM节点的优秀的方案")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    ReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPortal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    第一个参数child是任何可渲染的React子元素。第二个参数是一个"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("元素\n")])])]),s("h3",{attrs:{id:"用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),s("p",[t._v("通常来讲，当从组件的render方法返回一个元素时，该元素将被挂载到DOM节点中离其最近的父节点")]),t._v(" "),s("h2",{attrs:{id:"profiler-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#profiler-api"}},[t._v("#")]),t._v(" Profiler API")]),t._v(" "),s("p",[s("strong",[t._v("Profiler测量渲染一个React应用多久渲染一次以及渲染一次的“代价”")])]),t._v(" "),s("h3",{attrs:{id:"用法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法-2"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),s("p",[t._v("Profiler能添加在React树中的 任何地方来测量树中这部分渲染所带来的开销。它需要两个prop:一个是id，一个是当组件树中的组件“提交”更新的时候被React调用的回调函数onRender(function)")]),t._v(" "),s("h2",{attrs:{id:"不使用es6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不使用es6"}},[t._v("#")]),t._v(" 不使用ES6")]),t._v(" "),s("blockquote",[s("p",[t._v("创建组件的方法：声明式组件、函数式组件、createReactClass")])]),t._v(" "),s("h2",{attrs:{id:"协调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协调"}},[t._v("#")]),t._v(" 协调")]),t._v(" "),s("h3",{attrs:{id:"设计动力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计动力"}},[t._v("#")]),t._v(" 设计动力")]),t._v(" "),s("p",[t._v("在某一事件节点调用React的render()方法，会创建一个由React元素组成的树。在下一次state或props更新时，相同的render()方法会返回一棵不同的树，React需要基于这两棵树之间的差别来判断如何有效的更新UI已办证当前UI与最新的树保持同步，React算法：")]),t._v(" "),s("ul",[s("li",[t._v("两个不同类型的元素会产生不同的树；")]),t._v(" "),s("li",[t._v("开发者可以通过key prop来暗示哪些子元素在不同的渲染下能保持稳定")])]),t._v(" "),s("h3",{attrs:{id:"diffing算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffing算法"}},[t._v("#")]),t._v(" Diffing算法")]),t._v(" "),s("p",[t._v("当对比两棵树时，React首先比较两棵树的根节点。不同类型的根节点元素会有不同的形态")]),t._v(" "),s("h4",{attrs:{id:"比对不同类型的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比对不同类型的元素"}},[t._v("#")]),t._v(" 比对不同类型的元素")]),t._v(" "),s("p",[t._v("当根节点为不同类型的元素时，React会拆卸原有的树并且建立起新的树。\n当拆卸一棵树时，对应的DOM节点也会被销毁。组件实例将执行componentWillUnmount()方法。当建立一棵新的树时，对应的DOM节点会被创建以及插入得到DOM中。组件实例将执行componentWillMount()方法，紧跟着componentDidMount()方法。所有跟之前的树所关联的state也会被销毁。\n在根节点以下的组件也会被卸载，它们的状态会被销毁。")]),t._v(" "),s("h4",{attrs:{id:"比对同一类型的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比对同一类型的元素"}},[t._v("#")]),t._v(" 比对同一类型的元素")]),t._v(" "),s("p",[t._v("当比对两个相同类型的React元素时，React会保留DOM节点，仅比对及更新有改变的属性")])])}),[],!1,null,null,null);a.default=e.exports}}]);